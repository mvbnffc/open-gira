# Input data and output locations
output_dir: 'results'

#####################################
### FLOODING / TRANSPORT WORKFLOW ###
#####################################

## Aqueduct Analysis ##
# This should be a named list of files that specify hazard raster files
# to retrieve using wget -i
hazard_datasets:
  aqueduct-coast: 'https://raw.githubusercontent.com/mjaquiery/aqueduct/main/tiffs.txt'
  #aqueduct-coast: 'config/hazard_resource_locations/aqueduct-coast_wtsub_perc95.txt'
  #aqueduct-river: 'config/hazard_resource_locations/aqueduct-river_rcp4p5_MIROC-ESM-CHEM_2030_tifs.txt'  # subset of aqueduct_tifs.txt
  aqueduct-river: 'config/hazard_resource_locations/aqueduct-river.txt'
  aqueduct-river-historical: 'config/hazard_resource_locations/aqueduct-river-historical.txt'

# TODO: have hazards as instances of some kind of struct rather than several dicts?
hazard_types:
  aqueduct-coast: 'flood'
  aqueduct-river: 'flood'
  aqueduct-river-historical: 'flood'

# OSM datasets in PBF format, principally from: https://download.geofabrik.de/ #
infrastructure_datasets:
  # whole planet file
  planet-latest: 'https://planet.osm.org/pbf/planet-latest.osm.pbf'
  # 'continent' extracts
  africa-latest: 'http://download.geofabrik.de/africa-latest.osm.pbf'
  asia-latest: 'http://download.geofabrik.de/asia-latest.osm.pbf'
  australia-oceania-latest: 'http://download.geofabrik.de/australia-oceania-latest.osm.pbf'
  central-america-latest: 'https://download.geofabrik.de/central-america-latest.osm.pbf'
  europe-latest: 'https://download.geofabrik.de/europe-latest.osm.pbf'
  north-america-latest: 'http://download.geofabrik.de/north-america-latest.osm.pbf'
  south-america-latest: 'http://download.geofabrik.de/south-america-latest.osm.pbf'
  # country extracts
  djibouti-latest: 'https://download.geofabrik.de/africa/djibouti-latest.osm.pbf'
  egypt-latest: 'http://download.geofabrik.de/africa/egypt-latest.osm.pbf'
  great-britain-latest: 'http://download.geofabrik.de/europe/great-britain-latest.osm.pbf'
  jamaica-latest: 'http://download.geofabrik.de/central-america/jamaica-latest.osm.pbf'
  kenya-latest: 'http://download.geofabrik.de/africa/kenya-latest.osm.pbf'
  tanzania-latest: 'https://download.geofabrik.de/africa/tanzania-latest.osm.pbf'
  wales-latest: 'https://download.geofabrik.de/europe/great-britain/wales-latest.osm.pbf'
  thailand-latest: 'https://download.geofabrik.de/asia/thailand-latest.osm.pbf'
  # small extract for testing purposes
  tanzania-mini: 'https://raw.githubusercontent.com/mjaquiery/aqueduct/main/tanzania-mini.osm.pbf'

# these files contain osmium filter expressions for selecting relevant nodes, ways and relations from .osm.pbf files
# the keys in the mapping, i.e. 'road' and 'rail' will be used to create FILTER_SLUG in rules
network_filters:
  road: 'config/osm_filters/road-tertiary.txt'
  rail: 'config/osm_filters/rail.txt'

# OSM tag data to retain on selected features, typically for usage in network annotation/analysis
# N.B. feature SELECTION is done with the expressions pointed to from network_filters
keep_tags:
  road: ['highway', 'surface', 'bridge', 'maxspeed', 'lanes']
  rail: ['railway', 'bridge', 'name']

# Number of slices to cut dataset into -- must be a square number
slice_count: 1

# CRS OSM uses
osm_epsg: 4326

transport:
  # if the following data can be sourced/hosted online, remove these config entries and download instead
  rehabilitation_costs_path: 'bundled_data/transport/rehabilitation.xlsx'
  tariff_costs_path: 'bundled_data/transport/tariffs.xlsx'
  speeds_path: 'bundled_data/transport/speeds.xlsx'
  road:
    # road network specific configuration
    default_shoulder_width_metres: 1.5
    default_lane_width_metres: 3.25
    # fudge factor to tune flow allocation
    flow_cost_time_factor: 0.49
  rail:
    flow_cost_time_factor: 0.49

direct_damages:
  # assets to calculate direct damages for
  # use empty list to process direct damages for all implemented asset types
  asset_types: [
    'road_paved',
    'road_unpaved',
    'rail_railway',
  ]
  # CSV damage fraction as a function of hazard intensity
  # per asset type, per hazard (flood, storm, etc.)
  curves_dir: 'bundled_data/damage_curves/'


###############################
### STORM / ENERGY WORKFLOW ###
###############################

# sets of storm ids to process for potentially many country networks
storm_sets:
    # TODO: hide this first set from user, as they shouldn't need to change them?
    # files containing empty list, indicating to process all in dataset
    IBTrACS: 'config/storm_sets/ibtracs.json'
    STORM-constant: 'config/storm_sets/storm-constant.json'
    STORM-CMCC-CM2-VHR4: 'config/storm_sets/storm-cmcc-cm2-vhr4.json'
    STORM-CNRM-CM6-1-HR: 'config/storm_sets/storm-cnrm-cm6-1-hr.json'
    STORM-EC-Earth3P-HR: 'config/storm_sets/storm-ec-earth3p-hr.json'
    STORM-HadGEM3-GC31-HM: 'config/storm_sets/storm-hadgem3-gc31-hm.json'

    # files containing a list of storm id strings that constitute the storm set
    # key should follow the pattern: <dataset>_<storm_set_reference>
    # where dataset belongs to:
    # {IBTrACS, STORM-constant, STORM-CMCC-CM2-VHR4, etc.}
    IBTrACS_maria-2017: 'config/storm_sets/maria.json'
    IBTrACS_irma-2017: 'config/storm_sets/irma.json'
    IBTrACS_black-marble-validation: 'config/storm_sets/20230120_black_marble.json'

# consider countries at risk of a storm if within this many degrees of any storm track point
max_track_search_radius_deg: 2

# wind speed is constant within a square area of sides wind_deg
# note that for large domains, e.g. USA or CHN, 0.05 deg resolution requires
# on the order of 4GB RAM per storm wind estimate
wind_deg: 0.1  # approx 11km latitude

# Failure thresholds m/s. These values are the thresholds at which the network assets
# are expected to fail based on available literature.
transmission_windspeed_failure: [20., 22.5, 25.0, 27.5, 30., 32.5, 35., 37.5, 40, 42.5, 45]

# some of the scripts and rules are parallelised with multiprocessing
# works for annotate_targets.py and estimate_wind_fields.py
# setting to 1 will run any parallelisable job in serial
# N.B. snakemake will enforce:
# n_parallelisable_jobs * processes_per_parallel_job + n_serial_jobs <= the cores execution parameter
processes_per_parallel_job: 4

# whether to plot maximum wind fields and storm track animations for each storm
plot_wind:
    max_speed: True
    # WARNING: plotting the animation is slow.. you probably only ever want it for historic tracks
    animation: False
